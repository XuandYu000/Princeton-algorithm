/* *****************************************************************************
 *  Name:
 *  Date:
 *  Description:
 **************************************************************************** */

import edu.princeton.cs.algs4.Digraph;
import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.Queue;
import edu.princeton.cs.algs4.StdIn;
import edu.princeton.cs.algs4.StdOut;

public class SAP {
    private final Digraph digraph;
    private final int dSize;

    // constructor takes a digraph (not necessarily a DAG)
    public SAP(Digraph G) {
        if (G == null) {
            throw new IllegalArgumentException("Digraph is null");
        }
        digraph = new Digraph(G);
        dSize = digraph.V();
    }

    // length of shortest ancestral path between v and w; -1 if no such path
    public int length(int v, int w) {
        if (v > dSize || v < 0) {
            throw new IllegalArgumentException("Invalid vertex: " + v);
        }
        if (w > dSize || w < 0) {
            throw new IllegalArgumentException("Invalid vertex: " + w);
        }
        int[] vdisTo = new int[dSize];
        bfswalk(v, vdisTo);

        return wdisTov(w, vdisTo);
    }

    private void bfswalk(int v, int[] vdisTo) {
        for (int i = 0; i < dSize; i++) {
            vdisTo[i] = -1;
        }

        Queue<Integer> q = new Queue<Integer>();
        vdisTo[v] = 0;
        q.enqueue(v);
        while (!q.isEmpty()) {
            int cur = q.dequeue();
            for (int i : digraph.adj(cur)) {
                if (vdisTo[i] == -1) {
                    vdisTo[i] = vdisTo[cur] + 1;
                    q.enqueue(i);
                }
            }
        }
    }

    private int wdisTov(int w, int[] vdisTo) {
        if (vdisTo[w] != -1) {
            return vdisTo[w];
        }

        int[] wdisTo = new int[dSize];
        for (int i = 0; i < dSize; i++) {
            wdisTo[i] = -1;
        }

        Queue<Integer> q = new Queue<>();
        wdisTo[w] = 0;
        q.enqueue(w);
        while (!q.isEmpty()) {
            int cur = q.dequeue();
            if (vdisTo[cur] != -1) {
                return wdisTo[cur] + vdisTo[cur];
            }
            for (int i : digraph.adj(cur)) {
                if (wdisTo[i] == -1) {
                    wdisTo[i] = wdisTo[cur] + 1;
                    q.enqueue(i);
                }
            }
        }

        return -1;
    }

    // a common ancestor of v and w that participates in a shortest ancestral path; -1 if no such path
    public int ancestor(int v, int w) {
        if (v > dSize || v < 0) {
            throw new IllegalArgumentException("Invalid vertex: " + v);
        }
        if (w > dSize || w < 0) {
            throw new IllegalArgumentException("Invalid vertex: " + w);
        }
        int[] vdisTo = new int[dSize];
        bfswalk(v, vdisTo);

        return ancestor(w, vdisTo);
    }

    private int ancestor(int w, int[] vdisTo) {
        if (vdisTo[w] != -1) {
            return w;
        }

        int[] wdisTo = new int[dSize];
        for (int i = 0; i < dSize; i++) {
            wdisTo[i] = -1;
        }

        Queue<Integer> q = new Queue<>();
        wdisTo[w] = 0;
        q.enqueue(w);
        while (!q.isEmpty()) {
            int cur = q.dequeue();
            if (vdisTo[cur] != -1) {
                return cur;
            }
            for (int i : digraph.adj(cur)) {
                if (wdisTo[i] == -1) {
                    wdisTo[i] = wdisTo[cur] + 1;
                    q.enqueue(i);
                }
            }
        }

        return -1;
    }

    // length of shortest ancestral path between any vertex in v and any vertex in w; -1 if no such path
    public int length(Iterable<Integer> v, Iterable<Integer> w) {
        if (v == null || w == null) {
            throw new IllegalArgumentException("Input is null");
        }
        int len = Integer.MAX_VALUE;
        for (int nodev : v) {
            for (int nodew : w) {
                int dist = length(nodev, nodew);
                if (dist != -1) {
                    len = Math.min(len, dist);
                }
            }
        }

        if (len == Integer.MAX_VALUE) {
            return -1;
        }
        return len;
    }

    // // a common ancestor that participates in shortest ancestral path; -1 if no such path
    public int ancestor(Iterable<Integer> v, Iterable<Integer> w) {
        if (v == null || w == null) {
            throw new IllegalArgumentException("Input is null");
        }
        int len = Integer.MAX_VALUE;
        int node1 = -1, node2 = -1;
        for (int nodev : v) {
            for (int nodew : w) {
                int dist = length(nodev, nodew);
                if (dist != -1) {
                    len = Math.min(len, dist);
                    node1 = nodev;
                    node2 = nodew;
                }
            }
        }

        if (len == Integer.MAX_VALUE) {
            return -1;
        }
        else return ancestor(node1, node2);
    }

    public static void main(String[] args) {
        In in = new In(args[0]);
        Digraph G = new Digraph(in);
        SAP sap = new SAP(G);
        StdOut.println(G.toString());
        while (!StdIn.isEmpty()) {
            int v = StdIn.readInt();
            int w = StdIn.readInt();
            int length = sap.length(v, w);
            // Test for sap.length;
            // StdOut.printf("%d %d %d\n", v, w, length);

            int ancestor = sap.ancestor(v, w);
            StdOut.printf("length = %d, ancestor = %d\n", length, ancestor);
        }
    }
}
